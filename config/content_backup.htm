<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:</p>
<p>個人網站:</p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/G_XJtgvAw9E?si=ZBX2tkcDPBC2Qbha" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/T6TZ8_HuvRg" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YSO9UTGEJYg" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0w3iwthX41c" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rtEBztBdVe4" width="560"></iframe>心得:我前面因為拍影片一直錯到最會後我居然做到便非常快，非常熟練，我前面第一個是做的最差的一個題目最後面我自己覺得做的最好 因為都完成了 而且速度非常快，且五個方法都非常熟悉，</p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>第一 二題程式</p>
<p><a href="https://gist.github.com/LYX41323113/21a480f7435af78a6281dc0aa7b8fd0e">https://gist.github.com/LYX41323113/21a480f7435af78a6281dc0aa7b8fd0e</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TPWjWue8T9c" width="560"></iframe></p>
<h3>w12</h3>
<p>這段 Python 程式碼會執行以下兩個部分：</p>
<ol>
<li><strong>印出金字塔形狀</strong>： 第一部分會印出由星號 (<code>*</code>) 組成的金字塔形狀，每行的星號數量是逐漸增加的，而每行的前導空格數量則逐漸減少。例如，對於 <code>n = 5</code>，會輸出：</li>
</ol>
<div class="contain-inline-size rounded-md border-[0.5px] border-token-border-medium relative bg-token-sidebar-surface-primary dark:bg-gray-950">
<div class="flex items-center text-token-text-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md h-9 bg-token-sidebar-surface-primary dark:bg-token-main-surface-secondary select-none">markdown</div>
<div class="sticky top-9 md:top-[5.75rem]">
<div class="absolute bottom-0 right-2 flex h-9 items-center">
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong></strong></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong> 學習基礎的迴圈和格式化字串</strong>：這段程式碼幫助理解如何使用迴圈來生成圖形，並學會如何格式化字串來顯示變數的值。</div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong>簡單易懂</strong>：程式碼結構清晰，適合初學者理解基本的程式設計概念。</div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"><strong>靈活性高</strong>：可以輕鬆調整 <code>n</code> 來改變金字塔的大小。</div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary"></div>
<div class="flex items-center rounded bg-token-sidebar-surface-primary px-2 font-sans text-xs text-token-text-secondary dark:bg-token-main-surface-secondary">程式碼n = 5 # 設定層數 space = ' ' # 空格字元 # 第一部分：印出金字塔 for i in range(n): # 對於每一行 # 印出空格 print(space * (n - i - 1), end='') # 末尾不換行 # 印出星號 print('*' * (2 * i + 1)) # 星號數量為 2*i+1 print() # 加一個空行 # 第二部分：顯示當前數字 for i in range(n): # 對於每一行 # 印出當前的數字 print(f"目前的數字為 {i}")</div>
</div>
</div>
</div>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/LKECz_UpLL0" width="560"></iframe></p>
<p><br/><br/><br/><br/></p>
<script src="https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js" type="text/javascript"></script><h3>w12_hw</h3>
<ol>
<li><span>請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></li>
</ol>
<p>以下是 01 到 10 號代碼的簡短說明和心得：</p>
<h4>01 - 打印貓咪圖案：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/01">程式碼</a></p>
<pre><code class="language-python">print(" /\\_/\\   ")
print(" &gt;^.^&lt;   ")
print("  / \\    ")
print(" (___)___")
</code></pre>
<p><strong>說明：</strong> 打印一個簡單的 ASCII 藝術貓咪圖案。<br/> <strong>心得：</strong> 學習如何用字符打印出簡單的圖形和符號。</p>
<hr/>
<h4>02 - 用戶輸入並輸出：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/02">程式碼</a></p>
<pre><code class="language-python">name = input("What's your name?")
favorite_food = input("What is your favorite food?")
print("Hi! My name is " + name)
print("My favorite food is " + favorite_food)
print(name + "'s favorite food is " + favorite_food)
</code></pre>
<p><strong>說明：</strong> 提示用戶輸入名字和最喜歡的食物，然後輸出。<br/> <strong>心得：</strong> 學會了如何獲取用戶輸入並將其打印輸出。</p>
<hr/>
<h4>03 - 查找書籍：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/03">程式碼</a></p>
<pre><code class="language-python">programming_books = ["Learn python", "Python for all", "Intro to python"]
wanted_book = input("你好！你想買哪本書？ ")
if wanted_book in programming_books:
    print("是的，我們有這本書！")
else:
    print("抱歉，我們沒有這本書")
</code></pre>
<p><strong>說明：</strong> 判斷用戶輸入的書籍是否在可供購買的列表中。<br/> <strong>心得：</strong> 了解如何使用 <code inline="">if</code> 語句和 <code inline="">in</code> 操作符進行條件判斷。</p>
<hr/>
<h4>04 - 購物清單管理：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/04">程式碼</a></p>
<pre><code class="language-python">shopping_list = ["carrots", "chocolate", "olives"]
new_item = input("What else do I have to buy?")
if new_item in shopping_list:
    print(new_item + " is/are already in the shopping list")
else:
    shopping_list.append(new_item)
    item_to_remove = input("What do I have to remove?")
    if item_to_remove in shopping_list:
        shopping_list.remove(item_to_remove)
</code></pre>
<p><strong>說明：</strong> 管理購物清單，添加和刪除物品。<br/> <strong>心得：</strong> 學會了如何操作列表進行添加、刪除、檢查元素。</p>
<hr/>
<h4>05 - 修改菜單：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/05">程式碼</a></p>
<pre><code class="language-python">todays_menu = ["burger", "salad", "coke"]
side_dish_index = todays_menu.index("salad")
todays_menu.pop(side_dish_index)
todays_menu.insert(side_dish_index, "fries")
</code></pre>
<p><strong>說明：</strong> 修改菜單，替換掉 "salad" 為 "fries"。<br/> <strong>心得：</strong> 學會了如何修改列表中的元素，通過索引定位並進行替換。</p>
<hr/>
<h4>06 - 列表切片與索引：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/06">程式碼</a></p>
<pre><code class="language-python">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities[1])
print(cities[1:4])
print(cities[::2])
print(cities[::-1])
</code></pre>
<p><strong>說明：</strong> 展示如何使用索引和切片操作訪問列表中的元素。<br/> <strong>心得：</strong> 熟悉了 Python 列表的切片與反轉操作。</p>
<hr/>
<h4>07 - 修改列表元素：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/07">程式碼</a></p>
<pre><code class="language-python">senses = ["eyes", "nose", "ears", "tongue", "skin"]
senses[1] = "smell"
senses[3:5] = ["taste", "touch"]
planets = ["Mercury", "Mars", "Earth", "Neptune"]
planets = planets + ["Jupiter"]
planets = planets[0:2] + ["Venus"] + planets[2:5]
</code></pre>
<p><strong>說明：</strong> 修改和合併列表元素，演示了替換和拼接操作。<br/> <strong>心得：</strong> 學會了列表的元素修改和拼接方法。</p>
<hr/>
<h4>08 - 朋友和菜肴：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/08">程式碼</a></p>
<pre><code class="language-python">friends = ["Geetha", "Luca", "Daisy", "Juhan"]
dishes = ["sushi", "burgers", "tacos", "pizza"]
for index in range(0, 4):
    print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])
</code></pre>
<p><strong>說明：</strong> 輸出每個朋友及其喜歡的菜肴。<br/> <strong>心得：</strong> 理解了如何通過 <code inline="">for</code> 循環遍歷多個列表中的元素並輸出。</p>
<hr/>
<h4>09 - 動物循環：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/09">程式碼</a></p>
<pre><code class="language-python">animals = ["giraffe", "penguin", "dolphin"]
wanted_to_see = "penguin"
for i in range(0, len(animals)):
    print("-- Beginning of loop --")
    print("The element in position " + str(i) + " is " + animals[i])
for i in range(0, len(animals)):
    if animals[i] == wanted_to_see:
        print("I saw a " + animals[i] + " and I really wanted to see it!")
    else:
        print("I saw a " + animals[i])
</code></pre>
<p><strong>說明：</strong> 遍歷動物列表，檢查是否是你想要看到的動物。<br/> <strong>心得：</strong> 學會了如何在循環中加入條件判斷，並做出相應輸出。</p>
<hr/>
<h4>10 - 配件列表：</h4>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/203528692f1f982359a8dc7490e71057/raw/6f557301e1ccf77fe69344dacacb36b2854c7f80/10">程式碼</a></p>
<pre><code class="language-python">accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
for i in range(len(accessories)):
    print("The element " + accessories[i] + " is in position " + str(i))
for i in range(len(accessories)):
    if len(accessories[i]) == 6:
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
</code></pre>
<p><strong>說明：</strong> 根據字符串的長度檢查配件列表中的元素。<br/> <strong>心得：</strong> 學會了如何使用條件判斷和字符串長度方法處理列表中的元素。</p>
<hr/>
<h4>總結：</h4>
<p>這些程式幫助我掌握了 Python 中常用的列表操作、條件判斷、循環結構等基本知識。每個程式展示了如何有效地操作和管理數據，並輸出結果。通過這些練習，可以加深對 Python 基礎語法和數據結構的理解。</p><h3>w13_hw</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">心得:這如果沒有chat gpt 和朋友的幫助我畫不出來</div>
<div><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/90d5fdc12ba654118d97fd7c32a4598f/raw/2c99a20756e22962b96831139d3bfce5c003fcbb/hw1.py">解</a></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色的
ctx.globalCompositeOperation = "screem"

# 黑邊圓*2 (每個畫四個邊邊)
ctx.strokeStyle = 'black'

# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "SkyBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Coral"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "LimeGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Beige"  
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "DarkOrchid" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "ForestGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Gold"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Crimson" 
ctx.fill()
ctx.stroke()

# 紅方形*2 (4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "LightYellow" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkSlateBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightCyan" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGreen"  
ctx.fill()
ctx.stroke()

# 重疊的小方型
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "SteelBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "MediumPurple" 
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()
</script>
</p><h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p><span>心得:利用所提供的程式，利用ai來完成題目，運用和w13作業相差無幾的方式來解決</span></p>
<p><span><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/1d46aaa7172f65ab6531f2e05779fb85/raw/0a53940b23972833e2b536918ec83d2067251c32/hw1.py">解</a></span></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<h3>w15</h3>
<p></p>
<p><span>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</span></p>
<p><span><strong>設計思考</strong><br/>這個需求可以透過 Python 的 <code>range()</code> 函式與 <code>sum()</code> 函式快速達成。我們利用 <code>sum(range(1, 101))</code> 來計算 1 到 100 的總和，並將結果顯示在網頁上。</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def addto(init, addto):
    sum = 0
    for i in range(init, addto + 1):
        sum += i
    print(f"從 {init} 到 {addto} 的累加結果是: {sum}")

# 計算從 1 到 100
addto(1, 100)
</pre>
<p><br/><br/></p>
<p><span><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/4db4ae3a059c735cef601fa7ef40b466/raw/d78142d105028b673b01973c7594944644b475a5/%25E9%25A1%258C%25E7%259B%25AE1">題目1程式</a></span></p>
<p>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</p>
<p>這個函式接收兩個參數 <code>start</code> 和 <code>end</code>，並回傳從 <code>start</code> 累加到 <code>end</code> 的總和。<code>sum(range(start, end + 1))</code> 會生成一個從 <code>start</code> 到 <code>end</code> 的數字列表，並對其進行累加。</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def addto(init, addto):
    sum = 0
    for i in range(init, addto + 1):
        sum += i
    print(f"addto 函式的總和是: {sum}")

# 使用 addto 函式計算從 1 到 100
addto(1, 100)
</pre>
<p><br/><br/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"></pre>
<p><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/4db4ae3a059c735cef601fa7ef40b466/raw/d78142d105028b673b01973c7594944644b475a5/%25E9%25A1%258C%25E7%259B%25AE2">addto</a></p>
<p>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 <span>add_only_even 作為連結標題.</span></p>
<p><span>我們需要只累加範圍內的偶數，可以利用條件判斷 <code>i % 2 == 0</code> 來篩選出偶數。<code>sum(i for i in range(start, end + 1) if i % 2 == 0)</code> 會累加所有符合條件的偶數。</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(init, addto):
    sum = 0
    for i in range(init, addto + 1):
        if i % 2 == 0:  # 判斷是否為偶數
            sum += i
    print(f"從 {init} 到 {addto} 之間的偶數總和是: {sum}")

# 計算從 1 到 100 之間的偶數總和
add_only_even(1, 100)
</pre>
<p><span><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/4db4ae3a059c735cef601fa7ef40b466/raw/d78142d105028b673b01973c7594944644b475a5/%25E9%25A1%258C%25E7%259B%25AE3"> add_only_even</a></span></p>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><span><strong>設計思考</strong><br/>我們需要避開數字中出現 "8" 的整數。可以將數字轉換成字串並檢查字串中是否包含 <code>"8"</code>，然後排除這些數字。<code>sum(i for i in range(start, end + 1) if '8' not in str(i))</code> 可以達到此目的</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(init, addto):
    sum = 0
    for i in range(init, addto + 1):
        if '8' not in str(i):  # 如果數字中不包含 "8"
            sum += i
    print(f"從 {init} 到 {addto} 之間，避開包含 8 的總和是: {sum}")

# 計算從 1 到 100 之間，避開包含 8 的數字的總和
add_avoid_8(1, 100)
</pre>
<p></p>
<p><span><a href="https://glorious-spork-r4p4rv4q99wqfxgvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/4db4ae3a059c735cef601fa7ef40b466/raw/d78142d105028b673b01973c7594944644b475a5/%25E9%25A1%258C%25E7%259B%25AE4">add_avoid_8</a></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"></pre>
<p></p>
<!-- Python 程式碼 -->
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
   
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
   
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
   
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
   
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
           
            if in_circle1 and in_circle2 and in_circle3:
                # 交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 只在圓1與圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 只在圓2與圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 只在圓1與圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 三個圓心和半徑的設定
# 假設三個圓心分佈成等邊三角形的頂點，並設置它們的半徑
radius = 100  # 圓的半徑
x1, y1 = 150, 200  # 圓1 圓心
x2, y2 = 250, 200  # 圓2 圓心
x3, y3 = 200, 100  # 圓3 圓心

# 呼叫畫圓函式
draw_circles(x1, y1, radius, x2, y2, radius, x3, y3, radius)
</script>
</p><h1>HW 2</h1>
<p>.be/mjY7mJTDjOw?si=ynnyz_Qs</p>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h4></h4><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<script src="https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js" type="text/javascript"></script>
<h6></h6>
<script type="text/python">
        from browser import document, svg, timer

        # 設定迷宮畫布的大小
        canvas_width, canvas_height = 400, 400

        # 創建 SVG 畫布
        canvas = svg.svg(width=canvas_width, height=canvas_height)
        document <= canvas

        # 設定起點，根據學號 (3113) -> (31, 13)
        start_x, start_y = 31, 13
        current_x, current_y = start_x * 10, start_y * 10

        # 終點
        end_x, end_y = 350, 350

        # 繪製迷宮牆壁
        walls = [
            ((50, 50), (350, 50)),  # 上邊框
            ((50, 50), (50, 350)),  # 左邊框
            ((350, 50), (350, 350)),  # 右邊框
            ((50, 350), (350, 350)),  # 下邊框
            ((150, 50), (150, 250)),  # 垂直內牆 1
            ((250, 100), (250, 350)),  # 垂直內牆 2
            ((150, 250), (250, 250)),  # 水平內牆
        ]
        for (x1, y1), (x2, y2) in walls:
            canvas <= svg.line(x1=x1, y1=y1, x2=x2, y2=y2, stroke="black", stroke_width=5)

        # 畫出起點 (紅色圓點)
        canvas <= svg.circle(cx=current_x, cy=current_y, r=5, fill="red")

        # 畫出終點 (藍色圓點)
        canvas <= svg.circle(cx=end_x, cy=end_y, r=5, fill="blue")

        # 綠色點，代表移動中的物體
        moving_point = svg.circle(cx=current_x, cy=current_y, r=5, fill="green")
        canvas <= moving_point

        # 定義移動邏輯
        def move():
            global current_x, current_y
            if current_x < end_x:
                current_x += 10
            elif current_y < end_y:
                current_y += 10
            else:
                timer.clear_interval(move_timer)  # 到達終點，停止移動

            # 更新綠色點的位置
            moving_point.attrs["cx"] = current_x
            moving_point.attrs["cy"] = current_y

        # 每 100 毫秒執行一次移動
        move_timer = timer.set_interval(move, 100)
    
</script><h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-LYX41323113/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/26dbc77fbffa1f3f23f0c33fa593c81d/raw/08ea30e68236f3c73cabc48f2b5bc078edb18703/HW%25202%2520Exam">程式碼</a></p>
<p><canvas height="500" id="canvas" style="border: 1px solid black;" width="900"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KFTJjCPHz4E" width="560"></iframe></canvas></p>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KFTJjCPHz4E" width="560"></iframe></p>
<!-- 导入 Brython 库 -->
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython_stdlib.js"></script>
<!-- 启动 Brython -->
<script>
window.onload = function () {
    brython();
};
</script>
<script type="text/python">
import math
from browser import document

# 获取画布与绘图上下文
canvas = document["canvas"]
ctx = canvas.getContext("2d")

# 设置起始坐标 (31, 13)
origin_x = 31 * 15  # 乘以15，增加比例，适配画布
origin_y = 13 * 15  # 乘以15，增加比例，适配画布
spacing = 80  # 每个图形之间的间距，调整为80避免重叠

# 调整起始坐标，向左移动
offset_x = -200  # 将此值设置为更小的负值，确保图形向左偏移

# 绘制坐标轴
def draw_axes():
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2

    # X轴
    ctx.beginPath()
    ctx.moveTo(origin_x + offset_x, origin_y)
    ctx.lineTo(canvas.width, origin_y)  # 向右延伸
    ctx.stroke()

    # Y轴
    ctx.beginPath()
    ctx.moveTo(origin_x + offset_x, origin_y)
    ctx.lineTo(origin_x + offset_x, canvas.height)  # 向下延伸
    ctx.stroke()

    # 标记原点
    ctx.fillStyle = "black"
    ctx.font = "12px Arial"
    ctx.fillText(f"({31}, {13})", origin_x + offset_x + 5, origin_y - 5)

# 绘制橘色六边形
def draw_orange_hexagon(x, y, radius):
    ctx.fillStyle = "orange"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    for i in range(6):
        angle = math.pi / 3 * i
        x_offset = x + radius * math.cos(angle)
        y_offset = y + radius * math.sin(angle)
        if i == 0:
            ctx.moveTo(x_offset, y_offset)
        else:
            ctx.lineTo(x_offset, y_offset)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制绿色菱形
def draw_green_diamond(x, y, width, height):
    ctx.fillStyle = "green"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.moveTo(x, y - height / 2)  # 上顶点
    ctx.lineTo(x + width / 2, y)  # 右顶点
    ctx.lineTo(x, y + height / 2)  # 下顶点
    ctx.lineTo(x - width / 2, y)  # 左顶点
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制正三角形
def draw_equilateral_triangle(x, y, side_length):
    ctx.fillStyle = "blue"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    height = math.sqrt(3) / 2 * side_length  # 计算等边三角形的高度
    ctx.moveTo(x, y - height / 2)  # 顶点
    ctx.lineTo(x - side_length / 2, y + height / 2)  # 左下顶点
    ctx.lineTo(x + side_length / 2, y + height / 2)  # 右下顶点
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制粉红圆形
def draw_pink_circle(x, y, radius):
    ctx.fillStyle = "pink"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi)
    ctx.fill()
    ctx.stroke()

# 绘制黄色正方形
def draw_yellow_square(x, y, size):
    ctx.fillStyle = "yellow"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.fillRect(x, y, size, size)
    ctx.strokeRect(x, y, size, size)

# 绘制深蓝色长方形
def draw_dark_blue_rectangle(x, y, width, height):
    ctx.fillStyle = "darkblue"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.fillRect(x, y, width, height)
    ctx.strokeRect(x, y, width, height)

# 主程序：清空画布并绘图
def draw():
    ctx.clearRect(0, 0, canvas.width, canvas.height)  # 清空画布
    draw_axes()  # 绘制坐标轴

    # 计算象限内的位置
    shape_x_start = origin_x + spacing + offset_x  # 起始的横坐标
    shape_y_start = origin_y + spacing  # 起始的纵坐标

    # 调整图形位置，使它们分布在象限内
    draw_orange_hexagon(shape_x_start, shape_y_start, 50)  # 橘色六边形
    draw_green_diamond(shape_x_start + spacing, shape_y_start, 60, 120)  # 绿色菱形
    draw_equilateral_triangle(shape_x_start + spacing * 2, shape_y_start, 60)  # 正三角形
    draw_pink_circle(shape_x_start + spacing * 3, shape_y_start, 40)  # 粉红圆形
    draw_yellow_square(shape_x_start + spacing * 4, shape_y_start, 50)  # 黄色正方形
    draw_dark_blue_rectangle(shape_x_start + spacing * 5, shape_y_start, 100, 50)  # 深蓝色长方形

# 初始化绘图
draw()
</script><h3>w16_exam1</h3>
<!-- 导入 Brython 库 -->
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython_stdlib.js"></script>
<!-- 启动 Brython -->
<script>
window.onload = function () {
    brython();
};
</script>
<script type="text/python">
import math
from browser import document

# 获取画布与绘图上下文
canvas = document["canvas"]
ctx = canvas.getContext("2d")

# 设置起始坐标 (31, 13)
origin_x = 31 * 15  # 乘以15，增加比例，适配画布
origin_y = 13 * 15  # 乘以15，增加比例，适配画布
spacing = 80  # 每个图形之间的间距，调整为80避免重叠

# 调整起始坐标，向左移动
offset_x = -200  # 将此值设置为更小的负值，确保图形向左偏移

# 绘制坐标轴
def draw_axes():
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2

    # X轴
    ctx.beginPath()
    ctx.moveTo(origin_x + offset_x, origin_y)
    ctx.lineTo(canvas.width, origin_y)  # 向右延伸
    ctx.stroke()

    # Y轴
    ctx.beginPath()
    ctx.moveTo(origin_x + offset_x, origin_y)
    ctx.lineTo(origin_x + offset_x, canvas.height)  # 向下延伸
    ctx.stroke()

    # 标记原点
    ctx.fillStyle = "black"
    ctx.font = "12px Arial"
    ctx.fillText(f"({31}, {13})", origin_x + offset_x + 5, origin_y - 5)

# 绘制橘色六边形
def draw_orange_hexagon(x, y, radius):
    ctx.fillStyle = "orange"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    for i in range(6):
        angle = math.pi / 3 * i
        x_offset = x + radius * math.cos(angle)
        y_offset = y + radius * math.sin(angle)
        if i == 0:
            ctx.moveTo(x_offset, y_offset)
        else:
            ctx.lineTo(x_offset, y_offset)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制绿色菱形
def draw_green_diamond(x, y, width, height):
    ctx.fillStyle = "green"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.moveTo(x, y - height / 2)  # 上顶点
    ctx.lineTo(x + width / 2, y)  # 右顶点
    ctx.lineTo(x, y + height / 2)  # 下顶点
    ctx.lineTo(x - width / 2, y)  # 左顶点
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制正三角形
def draw_equilateral_triangle(x, y, side_length):
    ctx.fillStyle = "blue"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    height = math.sqrt(3) / 2 * side_length  # 计算等边三角形的高度
    ctx.moveTo(x, y - height / 2)  # 顶点
    ctx.lineTo(x - side_length / 2, y + height / 2)  # 左下顶点
    ctx.lineTo(x + side_length / 2, y + height / 2)  # 右下顶点
    ctx.closePath()
    ctx.fill()
    ctx.stroke()

# 绘制粉红圆形
def draw_pink_circle(x, y, radius):
    ctx.fillStyle = "pink"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi)
    ctx.fill()
    ctx.stroke()

# 绘制黄色正方形
def draw_yellow_square(x, y, size):
    ctx.fillStyle = "yellow"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.fillRect(x, y, size, size)
    ctx.strokeRect(x, y, size, size)

# 绘制深蓝色长方形
def draw_dark_blue_rectangle(x, y, width, height):
    ctx.fillStyle = "darkblue"
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.fillRect(x, y, width, height)
    ctx.strokeRect(x, y, width, height)

# 主程序：清空画布并绘图
def draw():
    ctx.clearRect(0, 0, canvas.width, canvas.height)  # 清空画布
    draw_axes()  # 绘制坐标轴

    # 计算象限内的位置
    shape_x_start = origin_x + spacing + offset_x  # 起始的横坐标
    shape_y_start = origin_y + spacing  # 起始的纵坐标

    # 调整图形位置，使它们分布在象限内
    draw_orange_hexagon(shape_x_start, shape_y_start, 50)  # 橘色六边形
    draw_green_diamond(shape_x_start + spacing, shape_y_start, 60, 120)  # 绿色菱形
    draw_equilateral_triangle(shape_x_start + spacing * 2, shape_y_start, 60)  # 正三角形
    draw_pink_circle(shape_x_start + spacing * 3, shape_y_start, 40)  # 粉红圆形
    draw_yellow_square(shape_x_start + spacing * 4, shape_y_start, 50)  # 黄色正方形
    draw_dark_blue_rectangle(shape_x_start + spacing * 5, shape_y_start, 100, 50)  # 深蓝色长方形

# 初始化绘图
draw()
</script><h1>HW 3</h1>
<h4>主題13: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<p></p>
<p>w16_exam2</p><h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p>w16_exam2</p><h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-LYX41323113/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/eada18a0a87dbe384e2da225dd20571b/raw/ac1de66cc6d7ff9691b060b4b09204704111070c/w16_exam2">程式碼</a></p>
<p><canvas height="600" id="my_canvas" style="border: 1px solid black;" width="900"></canvas></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6H2o8hAErxc" width="560"></iframe></p>
<p></p>
<p></p>
<!-- 导入 Brython 库 -->
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython_stdlib.js"></script>
<!-- 启动 Brython -->
<script>
window.onload = function () {
    brython();
};
</script>
<script type="text/python">
import math
from browser import document, html

# 初始化 HTML，确保 canvas 元素存在
def setup_canvas():
    existing_canvas = document.querySelector("#my_canvas")
    if existing_canvas:
        existing_canvas.remove()
    canvas = html.CANVAS(id="my_canvas", width=400, height=315)  # 缩小后的宽高
    document <= canvas

setup_canvas()

# 获取 canvas 元素及上下文
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# 画布参数
origin_x, origin_y = 31 / 2, 50 / 2  # 缩小后的原点
line_width = 2
font_size = 18
ctx.font = f"{font_size}px Arial"
ctx.fillStyle = "red"

# 绘制文本
ctx.fillText("(31, 13)", origin_x + 5, origin_y - 7.5)

# 通用绘制线段函数
def draw_line(x1, y1, x2, y2, color="blue", width=2):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.lineWidth = width
    ctx.stroke()

# 绘制 X 轴分段线
x_coords = [
    (origin_x, origin_y, 320 / 2, origin_y),
    (480 / 2, origin_y, 800 / 2, origin_y),
    (160 / 2, 150 / 2, 640 / 2, 150 / 2),
    (origin_x, 270 / 2, 320 / 2, 270 / 2),
    (160 / 2, 390 / 2, 640 / 2, 390 / 2),
    (320 / 2, 510 / 2, 480 / 2, 510 / 2),
    (origin_x, 630 / 2, 320 / 2, 630 / 2),
    (480 / 2, 630 / 2, 800 / 2, 630 / 2),
]

for x1, y1, x2, y2 in x_coords:
    draw_line(x1, y1, x2, y2)

# 绘制 Y 轴分段线
y_coords = [
    (origin_x, origin_y, origin_x, 630 / 2),
    (160 / 2, 390 / 2, 160 / 2, 510 / 2),
    (320 / 2, 150 / 2, 320 / 2, 270 / 2),
    (320 / 2, 510 / 2, 320 / 2, 630 / 2),
    (480 / 2, 270 / 2, 480 / 2, 390 / 2),
    (640 / 2, 150 / 2, 640 / 2, 270 / 2),
    (640 / 2, 390 / 2, 640 / 2, 630 / 2),
    (800 / 2, origin_y, 800 / 2, 630 / 2),
]

for x1, y1, x2, y2 in y_coords:
    draw_line(x1, y1, x2, y2)
</script><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-LYX41323113/content/Brython.html?src=https://gist.githubusercontent.com/LYX41323113/3bb229f5203d8b14e3376bc70bc2d14e/raw/36b6b98edfdc2b44f3d5db210d01cf6104e1617d/w16_exam3">程式碼</a></p>
<p><canvas height="600" id="canvas" style="border: 1px solid black;" width="1000"></canvas></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5T3cPJ3oyRw" width="560"></iframe></p>
<!-- 导入 Brython 库 -->
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/brython@3.10.5/brython_stdlib.js"></script>
<!-- 启动 Brython -->
<script>
window.onload = function () {
    brython();
};
</script>
<script type="text/python">
import math
from browser import document, html

# 初始化 HTML，确保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#canvas"):
        canvas = html.CANVAS(id="canvas", width=1000, height=600)
        document <= canvas

setup_canvas()

# Set up canvas
canvas = document["canvas"]
ctx = canvas.getContext("2d")

# Set origin (31, 13)
origin_x, origin_y = 31, 13
ctx.font = "12px Arial"  # 缩小字体大小
ctx.fillStyle = "red"
ctx.fillText("(31, 13)", origin_x + 10, origin_y - 8)  # 在红点的右上方标出坐标

# Draw X
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(180, origin_y)
ctx.moveTo(260, origin_y)
ctx.lineTo(420, origin_y)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(100, 90)
ctx.lineTo(340, 90)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(origin_x, 150)
ctx.lineTo(180, 150)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(100, 210)
ctx.lineTo(340, 210)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(180, 270)
ctx.lineTo(260, 270)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(origin_x, 330)
ctx.lineTo(180, 330)
ctx.moveTo(260, 330)
ctx.lineTo(420, 330)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

# Draw Y
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 330)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(100, 210)
ctx.lineTo(100, 270)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(180, 90)
ctx.lineTo(180, 150)
ctx.moveTo(180, 270)
ctx.lineTo(180, 330)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(260, 150)
ctx.lineTo(260, 210)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(340, 90)
ctx.lineTo(340, 150)
ctx.moveTo(340, 210)
ctx.lineTo(340, 330)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

ctx.beginPath()
ctx.moveTo(420, origin_y)
ctx.lineTo(420, 330)
ctx.strokeStyle = "blue"
ctx.lineWidth = 1.2
ctx.stroke()

# Draw Path
ctx.beginPath()
ctx.moveTo(220, origin_y)
ctx.lineTo(220, 60)
ctx.lineTo(380, 60)
ctx.lineTo(380, 180)
ctx.lineTo(300, 180)
ctx.lineTo(300, 130)
ctx.lineTo(220, 130)
ctx.lineTo(220, 180)
ctx.lineTo(60, 180)
ctx.lineTo(60, 320)
ctx.lineTo(140, 320)
ctx.lineTo(140, 240)
ctx.lineTo(300, 240)
ctx.lineTo(300, 320)
ctx.lineTo(220, 320)
ctx.lineTo(220, 330)
ctx.strokeStyle = "red"
ctx.lineWidth = 1.2
ctx.stroke()
</script><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/noUbvQGO4OQ" width="560"></iframe></p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;"><a href="file:///C:/Users/ASUS-NB/Desktop/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A8%8B%E5%BC%8F.pdf">pdf</a></p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>